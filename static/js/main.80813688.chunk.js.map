{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","CONTRACT_ADDRESS","App","useState","currentAccount","setCurrentAccount","loading","setLoadingStatus","openSeaLink","setOpenSeaLink","minted","setMintStatus","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","setupEventListener","connectWallet","alert","provider","ethers","providers","Web3Provider","signer","getSigner","NFTMinter","Contract","NFTminter","abi","once","on","from","tokenId","toNumber","chainId","location","reload","err","mintNFT","awardNFT","gasLimit","nftTxn","wait","hash","useEffect","checkChainId","className","onClick","rel","open","style","marginLeft","alt","src","twitterLogo","href","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80813688.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import './styles/App.css'\nimport twitterLogo from './assets/twitter-logo.svg'\nimport {SolarSystemLoading} from 'react-loadingg'\n\nimport React, { useEffect, useState } from \"react\"\nimport { ethers } from \"ethers\"\nimport NFTminter from './build/contracts/NFTminter.sol/NFTminter.json'\n\n// Constants\nconst TWITTER_HANDLE = 'mjkid221'\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`\nconst TOTAL_MINT_COUNT = 50\nconst CONTRACT_ADDRESS = \"0xb76fa3D109aF35c64990C19d9881a1A3e036DB69\" // rinkeby\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\")\n  const [loading, setLoadingStatus] = useState(false)\n  const [openSeaLink, setOpenSeaLink] = useState(\"\")\n  const [minted, setMintStatus] = useState(false)\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window\n\n    if(!ethereum){\n      console.log(\"MetaMask needs to be installed.\")\n      return\n    }else{\n      console.log(\"MetaMask loaded.\")\n    }\n\n    const accounts = await ethereum.request({method: 'eth_accounts'})\n    if (accounts.length !== 0){\n      const account = accounts[0]\n      console.log(\"Account: \", account)\n      setCurrentAccount(account)\n      setupEventListener()\n    }else{\n      console.log(\"Account not found\")\n    }\n  }\n  const connectWallet = async () =>{\n    try{\n      const { ethereum } = window\n      if(!ethereum){\n        alert(\"Requires MetaMask installation.\")\n        return\n      }\n      const accounts = await ethereum.request({method: \"eth_requestAccounts\"})\n      \n      setCurrentAccount(accounts[0])\n      setupEventListener()\n    }catch(err){\n      console.log(err)\n    }\n  }\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button className=\"cta-button connect-wallet-button\" onClick={connectWallet}>\n      Connect to Wallet\n    </button>\n  )\n  const setupEventListener = async () =>{\n    \n    try{\n      const { ethereum } = window\n      let NFTMinter\n      if(ethereum){\n        const provider = new ethers.providers.Web3Provider(ethereum)\n        const signer = provider.getSigner()\n        NFTMinter = new ethers.Contract(CONTRACT_ADDRESS, NFTminter.abi, signer)\n\n        provider.once(\"block\", () =>{\n          NFTMinter.on(\"NewNFTMinted\", (from, tokenId) => {\n            setLoadingStatus(false)\n            console.log(from, tokenId.toNumber())\n\n            setOpenSeaLink(`https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n            // alert(\"NFT Minted!\")\n          })\n        })\n        \n        ethereum.on('chainChanged', (chainId) => {\n          window.location.reload();\n        });\n      }\n    }catch(err){\n      console.log(err)\n      setLoadingStatus(false)\n    }\n  }\n  const mintNFT = async () =>{\n    setMintStatus(false)\n    setOpenSeaLink(\"\")\n    setLoadingStatus(true)\n    try{\n      const {ethereum} = window\n\n      if(ethereum){\n        const provider = new ethers.providers.Web3Provider(ethereum)\n        const signer = provider.getSigner()\n        const NFTMinter = new ethers.Contract(CONTRACT_ADDRESS, NFTminter.abi, signer)\n\n        let nftTxn = await NFTMinter.awardNFT({gasLimit: 3000000})\n        \n\n        console.log(\"Minting...\")\n        await nftTxn.wait()\n\n        console.log(`Minted at: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`)\n        setMintStatus(true)\n      }else{\n        console.log(\"Ethereum object does not exist.\")\n      }\n    }catch(err){\n      console.log(err)\n      setLoadingStatus(false)\n      setMintStatus(false)\n      alert(\"Could not mint NFT. Please try again.\")\n    }\n  }\n\n  useEffect(() =>{\n    checkIfWalletIsConnected()\n\n    async function checkChainId(){\n      let chainId = await window.ethereum.request({method: 'eth_chainId'})\n      const rinkebyChainId = \"0x4\"\n      if (chainId !== rinkebyChainId){\n        alert(\"NFT Mint contract not deployed on the current network. Please switch to Rinkeby.\")\n      }\n    }\n    checkChainId()\n    \n  }, [])\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">Master NFT Collection</p>\n          <p className=\"sub-text\">\n            Mint NFTs that contain a unique combination of snazzy titles just for you.\n          </p>\n          {currentAccount === \"\"\n            ? renderNotConnectedContainer()\n            : (<button onClick={mintNFT} className=\"cta-button connect-wallet-button\">Mint NFT</button>)\n          }\n        </div>\n        <div>\n          {loading?\n          <SolarSystemLoading/>\n          : <div></div>\n          }\n          {openSeaLink && minted\n            ?\n              <div>\n                <button \n                  className=\"cta-button opensea-button\"\n                  rel=\"noreferrer\"\n                  onClick = {() => {\n                    window.open(openSeaLink, \"_blank\")\n                  }}\n                >\n                  {openSeaLink}\n                </button>\n                <button \n                  className=\"cta-button connect-wallet-button\"\n                  rel=\"noreferrer\"\n                  style={{marginLeft: \"5px\"}}\n                  onClick = {() => {\n                    window.open(openSeaLink, \"_blank\")\n                  }}\n                >\n                  CLAIM\n              </button>\n              </div>\n            :<div></div>\n          }\n          \n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}